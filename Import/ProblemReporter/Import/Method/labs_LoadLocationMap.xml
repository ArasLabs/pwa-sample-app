<AML>
 <Item type="Method" id="3430BDA56E3645ADABCE513F7C5F6BDD" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[var topWnd = aras.getMostTopWindowWithAras(window),
    isEditMode = aras.isTempEx(topWnd.item) || (aras.isLockedByUser(topWnd.item) && aras.isEditStateEx(topWnd.item));

addCustomCssLink('../javascript/MapboxGL/mapbox-gl.css');
addCustomCssLink('../javascript/MapboxGL/mapbox-gl-geocoder.css');

require([
    "../javascript/MapboxGL/mapbox-gl.js",
    "../javascript/MapboxGL/mapbox-gl-geocoder.min.js"
], function(
    mapboxgl,
    geocoder
) {
    var token = getMapAccessToken();

    if (token === "") {
        //aras.AlertError("Mapbox access token is required. Please enter your token into labs_MapToken Variable value field.");
        console.error("Mapbox access token is required. Please enter your token into labs_MapToken Variable value field.");
        return;
    } else {
        getCoordinates().then(coordinates => {
            var mapEl =  document.getElementById("map");
            mapEl.innerHTML = '';
        
            mapboxgl.accessToken = token;

            var startingPosition = [coordinates.longitude, coordinates.latitude];

            // initialize map
            var map = new mapboxgl.Map({
                container: mapEl,
                style: 'mapbox://styles/mapbox/streets-v11',
                center: startingPosition,
                zoom: 16
            });

            var mapMarker = new mapboxgl.Marker({ color: "#4668F2" }).setLngLat(startingPosition).addTo(map);

            // Add the geocoder to the map
            var mapGeocoder = null;
            if(isEditMode) {
                mapGeocoder = new geocoder({
                    accessToken: mapboxgl.accessToken,
                    localGeocoder: coordinatesGeocoder,
                    mapboxgl: mapboxgl,
                    zoom: 16
                });

                map.addControl(mapGeocoder);
            }

            // create load function to place location marker
            map.on('load', function() {
                map.addSource('single-point', {
                    type: 'geojson',
                    data: {
                        type: 'FeatureCollection',
                        features: []
                    }
                });

                if(mapGeocoder) {
                    if(aras.isTempEx(topWnd.item)) {
                        reverseGeocodingRequest(mapGeocoder, coordinates.longitude, coordinates.latitude).then(res => {
                            setLocation(res);
                        });

                        document.thisItem.setProperty("coordinates", JSON.stringify({ longitude: coordinates.longitude, latitude: coordinates.latitude }));
                    }

                    mapGeocoder.on('result', function (e) {
                        var result = e.result;
                        map.getSource('single-point').setData(result.geometry);

                        var location = "";
                        if (!Object.prototype.hasOwnProperty.call(result, "id")) {
                            reverseGeocodingRequest(mapGeocoder, result.center[0], result.center[1]).then(res => {
                                setLocation(res);
                            });
                        } else {
                            setLocation(result.place_name);
                        }

                        var coordinates = (mapGeocoder.mapMarker || mapMarker).getLngLat();
                        document.thisItem.setProperty("coordinates", JSON.stringify({ longitude: coordinates.lng, latitude: coordinates.lat }));
                    });
                }
            });
        });
    }
});

function addCustomCssLink(path) {
    var link = document.createElement("link");
    link.setAttribute("rel", "stylesheet");
    link.setAttribute("type", "text/css");
    link.setAttribute("href", path);
    document.getElementsByTagName("head")[0].appendChild(link);
}

function getMapAccessToken() {
    // get token from Variable
    let tokenVariable = aras.newIOMItem("Variable","get");
    tokenVariable.setProperty("name","labs_MapToken");
    tokenVariable = tokenVariable.apply();

    return tokenVariable.getProperty("value","");
}

function getCoordinates() {
    var defaultPosition = { latitude: 0, longitude: 0 };

    var coordinates = document.thisItem.getProperty("coordinates", "");
    try {
        var coors = JSON.parse(coordinates);
        return Promise.resolve(coors);
    } catch (e) {
        console.log("Error parsing coordinates.", coordinates, e);

        return new Promise(function (resolve, rejected) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(resolve, rejected);
            } else {
                console.error("Geolocation is not supported by this browser.");
                resolve(defaultPosition);
            }
        }).then(function (position) {
            if (position !== null && position !== undefined && position.code !== 1) {
                let { latitude, longitude } = position.coords;

                return { latitude, longitude };
            }
            return defaultPosition;
        });
    }
}

function coordinatesGeocoder(query) {
    // match anything which looks like a decimal degrees coordinate pair
    var matches = query.match(
        /^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
    );
    if (!matches) {
        return null;
    }

    function coordinateFeature(lng, lat) {
        return {
            center: [lng, lat],
            geometry: {
                type: 'Point',
                coordinates: [lng, lat]
            },
            place_name: 'Lat: ' + lat + ' Lng: ' + lng,
            place_type: ['coordinate'],
            properties: {},
            type: 'Feature'
        };
    }

    var coord1 = Number(matches[1]);
    var coord2 = Number(matches[2]);
    var geocodes = [];

    if (coord1 < -90 || coord1 > 90) {
        // must be lng, lat
        geocodes.push(coordinateFeature(coord1, coord2));
    }

    if (coord2 < -90 || coord2 > 90) {
        // must be lat, lng
        geocodes.push(coordinateFeature(coord2, coord1));
    }

    if (geocodes.length === 0) {
        // else could be either lng, lat or lat, lng
        geocodes.push(coordinateFeature(coord1, coord2));
        geocodes.push(coordinateFeature(coord2, coord1));
    }

    return geocodes;
}

function reverseGeocodingRequest(mapGeocoder, longitude, latitude) {
    var req = mapGeocoder.geocoderService.reverseGeocode({ query: [longitude, latitude], types: ["poi"], limit: 1 });
    return mapGeocoder.geocoderService.client.sendRequest(req).then(res => {
        if (res && res.body && res.body.features && res.body.features.length > 0) {
            return res.body.features[0].place_name;
        }
        return "";
    });
}

function setLocation(location) {
    var locationField = getFieldByName("location");
    var locationInputEl  = locationField.querySelector("input[name='location']");
    
    locationInputEl.value = location;
    locationInputEl.dispatchEvent(new CustomEvent('change', {bubbles: true}));
}]]></method_code>
  <method_type>JavaScript</method_type>
  <name>labs_LoadLocationMap</name>
 </Item>
</AML>